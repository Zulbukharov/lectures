package mock

// Code generated by http://github.com/gojuno/minimock (dev). DO NOT EDIT.

//go:generate minimock -i post/internal/app.Repository -o ./internal/repository/mock/repository_mock.go -n RepositoryMock

import (
	"post/internal/models"
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock/v3"
)

// RepositoryMock implements app.Repository
type RepositoryMock struct {
	t minimock.Tester

	funcPut          func(pp1 *models.PostInsert) (err error)
	inspectFuncPut   func(pp1 *models.PostInsert)
	afterPutCounter  uint64
	beforePutCounter uint64
	PutMock          mRepositoryMockPut
}

// NewRepositoryMock returns a mock for app.Repository
func NewRepositoryMock(t minimock.Tester) *RepositoryMock {
	m := &RepositoryMock{t: t}
	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.PutMock = mRepositoryMockPut{mock: m}
	m.PutMock.callArgs = []*RepositoryMockPutParams{}

	return m
}

type mRepositoryMockPut struct {
	mock               *RepositoryMock
	defaultExpectation *RepositoryMockPutExpectation
	expectations       []*RepositoryMockPutExpectation

	callArgs []*RepositoryMockPutParams
	mutex    sync.RWMutex
}

// RepositoryMockPutExpectation specifies expectation struct of the Repository.Put
type RepositoryMockPutExpectation struct {
	mock    *RepositoryMock
	params  *RepositoryMockPutParams
	results *RepositoryMockPutResults
	Counter uint64
}

// RepositoryMockPutParams contains parameters of the Repository.Put
type RepositoryMockPutParams struct {
	pp1 *models.PostInsert
}

// RepositoryMockPutResults contains results of the Repository.Put
type RepositoryMockPutResults struct {
	err error
}

// Expect sets up expected params for Repository.Put
func (mmPut *mRepositoryMockPut) Expect(pp1 *models.PostInsert) *mRepositoryMockPut {
	if mmPut.mock.funcPut != nil {
		mmPut.mock.t.Fatalf("RepositoryMock.Put mock is already set by Set")
	}

	if mmPut.defaultExpectation == nil {
		mmPut.defaultExpectation = &RepositoryMockPutExpectation{}
	}

	mmPut.defaultExpectation.params = &RepositoryMockPutParams{pp1}
	for _, e := range mmPut.expectations {
		if minimock.Equal(e.params, mmPut.defaultExpectation.params) {
			mmPut.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmPut.defaultExpectation.params)
		}
	}

	return mmPut
}

// Inspect accepts an inspector function that has same arguments as the Repository.Put
func (mmPut *mRepositoryMockPut) Inspect(f func(pp1 *models.PostInsert)) *mRepositoryMockPut {
	if mmPut.mock.inspectFuncPut != nil {
		mmPut.mock.t.Fatalf("Inspect function is already set for RepositoryMock.Put")
	}

	mmPut.mock.inspectFuncPut = f

	return mmPut
}

// Return sets up results that will be returned by Repository.Put
func (mmPut *mRepositoryMockPut) Return(err error) *RepositoryMock {
	if mmPut.mock.funcPut != nil {
		mmPut.mock.t.Fatalf("RepositoryMock.Put mock is already set by Set")
	}

	if mmPut.defaultExpectation == nil {
		mmPut.defaultExpectation = &RepositoryMockPutExpectation{mock: mmPut.mock}
	}
	mmPut.defaultExpectation.results = &RepositoryMockPutResults{err}
	return mmPut.mock
}

//Set uses given function f to mock the Repository.Put method
func (mmPut *mRepositoryMockPut) Set(f func(pp1 *models.PostInsert) (err error)) *RepositoryMock {
	if mmPut.defaultExpectation != nil {
		mmPut.mock.t.Fatalf("Default expectation is already set for the Repository.Put method")
	}

	if len(mmPut.expectations) > 0 {
		mmPut.mock.t.Fatalf("Some expectations are already set for the Repository.Put method")
	}

	mmPut.mock.funcPut = f
	return mmPut.mock
}

// When sets expectation for the Repository.Put which will trigger the result defined by the following
// Then helper
func (mmPut *mRepositoryMockPut) When(pp1 *models.PostInsert) *RepositoryMockPutExpectation {
	if mmPut.mock.funcPut != nil {
		mmPut.mock.t.Fatalf("RepositoryMock.Put mock is already set by Set")
	}

	expectation := &RepositoryMockPutExpectation{
		mock:   mmPut.mock,
		params: &RepositoryMockPutParams{pp1},
	}
	mmPut.expectations = append(mmPut.expectations, expectation)
	return expectation
}

// Then sets up Repository.Put return parameters for the expectation previously defined by the When method
func (e *RepositoryMockPutExpectation) Then(err error) *RepositoryMock {
	e.results = &RepositoryMockPutResults{err}
	return e.mock
}

// Put implements app.Repository
func (mmPut *RepositoryMock) Put(pp1 *models.PostInsert) (err error) {
	mm_atomic.AddUint64(&mmPut.beforePutCounter, 1)
	defer mm_atomic.AddUint64(&mmPut.afterPutCounter, 1)

	if mmPut.inspectFuncPut != nil {
		mmPut.inspectFuncPut(pp1)
	}

	mm_params := &RepositoryMockPutParams{pp1}

	// Record call args
	mmPut.PutMock.mutex.Lock()
	mmPut.PutMock.callArgs = append(mmPut.PutMock.callArgs, mm_params)
	mmPut.PutMock.mutex.Unlock()

	for _, e := range mmPut.PutMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.err
		}
	}

	if mmPut.PutMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmPut.PutMock.defaultExpectation.Counter, 1)
		mm_want := mmPut.PutMock.defaultExpectation.params
		mm_got := RepositoryMockPutParams{pp1}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmPut.t.Errorf("RepositoryMock.Put got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmPut.PutMock.defaultExpectation.results
		if mm_results == nil {
			mmPut.t.Fatal("No results are set for the RepositoryMock.Put")
		}
		return (*mm_results).err
	}
	if mmPut.funcPut != nil {
		return mmPut.funcPut(pp1)
	}
	mmPut.t.Fatalf("Unexpected call to RepositoryMock.Put. %v", pp1)
	return
}

// PutAfterCounter returns a count of finished RepositoryMock.Put invocations
func (mmPut *RepositoryMock) PutAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmPut.afterPutCounter)
}

// PutBeforeCounter returns a count of RepositoryMock.Put invocations
func (mmPut *RepositoryMock) PutBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmPut.beforePutCounter)
}

// Calls returns a list of arguments used in each call to RepositoryMock.Put.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmPut *mRepositoryMockPut) Calls() []*RepositoryMockPutParams {
	mmPut.mutex.RLock()

	argCopy := make([]*RepositoryMockPutParams, len(mmPut.callArgs))
	copy(argCopy, mmPut.callArgs)

	mmPut.mutex.RUnlock()

	return argCopy
}

// MinimockPutDone returns true if the count of the Put invocations corresponds
// the number of defined expectations
func (m *RepositoryMock) MinimockPutDone() bool {
	for _, e := range m.PutMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.PutMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterPutCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcPut != nil && mm_atomic.LoadUint64(&m.afterPutCounter) < 1 {
		return false
	}
	return true
}

// MinimockPutInspect logs each unmet expectation
func (m *RepositoryMock) MinimockPutInspect() {
	for _, e := range m.PutMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to RepositoryMock.Put with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.PutMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterPutCounter) < 1 {
		if m.PutMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to RepositoryMock.Put")
		} else {
			m.t.Errorf("Expected call to RepositoryMock.Put with params: %#v", *m.PutMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcPut != nil && mm_atomic.LoadUint64(&m.afterPutCounter) < 1 {
		m.t.Error("Expected call to RepositoryMock.Put")
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *RepositoryMock) MinimockFinish() {
	if !m.minimockDone() {
		m.MinimockPutInspect()
		m.t.FailNow()
	}
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *RepositoryMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *RepositoryMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockPutDone()
}
